{
  "v": 9,
  "name": "Anchor Insight AI - Session-Based API Collection (Feedback Log Compliant)",
  "folders": [
    {
      "name": "ðŸŽ¯ Session Management",
      "folders": [],
      "requests": [
        {
          "name": "Create Focus Session",
          "url": "http://127.0.0.1:8001/api/v1/session",
          "path": "/api/v1/session",
          "method": "POST",
          "auth": {
            "authType": "none",
            "authActive": true
          },
          "preRequestScript": "",
          "testScript": "// Test: Create a new focus session (register user goal)\npw.test(\"Session creation returns 201\", () => {\n  pw.expect(pw.response.status).toBe(201);\n});\n\npw.test(\"Response has session_id\", () => {\n  const jsonData = pw.response.json();\n  pw.expect(jsonData).toHaveProperty(\"session_id\");\n  pw.expect(jsonData).toHaveProperty(\"goal\");\n  pw.expect(jsonData).toHaveProperty(\"created_at\");\n});",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "params": [],
          "body": {
            "contentType": "application/json",
            "body": "{\n  \"user_id\": \"user_123\",\n  \"goal\": \"Complete code review for project XYZ\",\n  \"duration_minutes\": 60\n}"
          },
          "_id": "req_create_session"
        }
      ],
      "_id": "folder_session"
    },
    {
      "name": "ðŸ“¹ Stream Processing",
      "folders": [],
      "requests": [
        {
          "name": "Upload Camera Video Chunk",
          "url": "http://127.0.0.1:8001/api/v1/session/{{session_id}}/stream/camera",
          "path": "/api/v1/session/{{session_id}}/stream/camera",
          "method": "POST",
          "auth": {
            "authType": "none",
            "authActive": true
          },
          "preRequestScript": "// Set session_id for testing\npw.env.set(\"session_id\", \"test-session-001\");",
          "testScript": "// Test: Upload a short camera video chunk (captured via OpenCV)\npw.test(\"Camera video upload returns 200\", () => {\n  pw.expect(pw.response.status).toBe(200);\n});\n\npw.test(\"Response has processing status\", () => {\n  const jsonData = pw.response.json();\n  pw.expect(jsonData).toHaveProperty(\"status\");\n  pw.expect(jsonData).toHaveProperty(\"timestamp\");\n  pw.expect(jsonData).toHaveProperty(\"person_detected\");\n});",
          "headers": [
            {
              "key": "Content-Type",
              "value": "multipart/form-data"
            }
          ],
          "params": [],
          "body": {
            "contentType": "multipart/form-data",
            "body": [
              {
                "key": "video_chunk",
                "value": "",
                "contentType": "video/mp4",
                "filename": "camera_chunk.mp4",
                "isFile": true
              },
              {
                "key": "timestamp",
                "value": "{{$timestamp}}",
                "contentType": "",
                "filename": "",
                "isFile": false
              }
            ]
          },
          "_id": "req_upload_camera"
        },
        {
          "name": "Upload Screen Screenshot",
          "url": "http://127.0.0.1:8001/api/v1/session/{{session_id}}/stream/screen",
          "path": "/api/v1/session/{{session_id}}/stream/screen",
          "method": "POST",
          "auth": {
            "authType": "none",
            "authActive": true
          },
          "preRequestScript": "// Set session_id for testing\npw.env.set(\"session_id\", \"test-session-001\");",
          "testScript": "// Test: Upload a short screen-share screenshot\npw.test(\"Screen upload returns 200\", () => {\n  pw.expect(pw.response.status).toBe(200);\n});\n\npw.test(\"Response has focus analysis\", () => {\n  const jsonData = pw.response.json();\n  pw.expect(jsonData).toHaveProperty(\"focus_score\");\n  pw.expect(jsonData).toHaveProperty(\"analysis\");\n  pw.expect(jsonData.focus_score).toBeGreaterThanOrEqual(0);\n  pw.expect(jsonData.focus_score).toBeLessThanOrEqual(100);\n});",
          "headers": [
            {
              "key": "Content-Type",
              "value": "multipart/form-data"
            }
          ],
          "params": [],
          "body": {
            "contentType": "multipart/form-data",
            "body": [
              {
                "key": "screenshot",
                "value": "",
                "contentType": "image/png",
                "filename": "screen_capture.png",
                "isFile": true
              },
              {
                "key": "timestamp",
                "value": "{{$timestamp}}",
                "contentType": "",
                "filename": "",
                "isFile": false
              }
            ]
          },
          "_id": "req_upload_screen"
        }
      ],
      "_id": "folder_stream"
    },
    {
      "name": "ðŸ”” Notifications & Feedback",
      "folders": [],
      "requests": [
        {
          "name": "Send Focus Notification",
          "url": "http://127.0.0.1:8001/api/v1/session/{{session_id}}/notifications",
          "path": "/api/v1/session/{{session_id}}/notifications",
          "method": "POST",
          "auth": {
            "authType": "none",
            "authActive": true
          },
          "preRequestScript": "// Set session_id for testing\npw.env.set(\"session_id\", \"test-session-001\");",
          "testScript": "// Test: Send real-time \"stay focused\" notifications (from anchor insight to anchor app, or directly to the anchor focus frontend. need a judgement)\npw.test(\"Notification returns 200\", () => {\n  pw.expect(pw.response.status).toBe(200);\n});\n\npw.test(\"Response has notification details\", () => {\n  const jsonData = pw.response.json();\n  pw.expect(jsonData).toHaveProperty(\"notification_id\");\n  pw.expect(jsonData).toHaveProperty(\"sent_at\");\n  pw.expect(jsonData).toHaveProperty(\"status\");\n});",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "params": [],
          "body": {
            "contentType": "application/json",
            "body": "{\n  \"type\": \"focus_reminder\",\n  \"message\": \"Stay focused! You've been distracted for 5 minutes.\",\n  \"priority\": \"medium\",\n  \"trigger_reason\": \"low_focus_score\"\n}"
          },
          "_id": "req_send_notification"
        },
        {
          "name": "Submit Session Feedback",
          "url": "http://127.0.0.1:8001/api/v1/session/{{session_id}}/feedback",
          "path": "/api/v1/session/{{session_id}}/feedback",
          "method": "POST",
          "auth": {
            "authType": "none",
            "authActive": true
          },
          "preRequestScript": "// Set session_id for testing\npw.env.set(\"session_id\", \"test-session-001\");",
          "testScript": "// Test: Receive end-of-session feedback: goal achieved flag, comments, user rating. Within 3 pieces of advices.\npw.test(\"Feedback submission returns 200\", () => {\n  pw.expect(pw.response.status).toBe(200);\n});\n\npw.test(\"Response has feedback confirmation\", () => {\n  const jsonData = pw.response.json();\n  pw.expect(jsonData).toHaveProperty(\"feedback_id\");\n  pw.expect(jsonData).toHaveProperty(\"advices\");\n  pw.expect(jsonData.advices).toHaveLength(3);\n});",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "params": [],
          "body": {
            "contentType": "application/json",
            "body": "{\n  \"feedback\": \"Great focus session, but got distracted by social media for a few minutes. Need better blocking mechanisms and longer break intervals.\",\n  \"goal_achieved\": true,\n  \"user_rating\": 8\n}"
          },
          "_id": "req_submit_feedback"
        }
      ],
      "_id": "folder_notifications"
    },
    {
      "name": "ðŸ“Š Scoring & Reporting",
      "folders": [],
      "requests": [
        {
          "name": "Get Current Session Score",
          "url": "http://127.0.0.1:8001/api/v1/sessions/{{session_id}}/score",
          "path": "/api/v1/sessions/{{session_id}}/score",
          "method": "POST",
          "auth": {
            "authType": "none",
            "authActive": true
          },
          "preRequestScript": "// Set session_id for testing\npw.env.set(\"session_id\", \"test-session-001\");",
          "testScript": "// Test: At this point, since the user didn't input the final feedback, therefore the score would be based on previous data collected during the focus session. Need fast feedback. Send the current session score at the session end\npw.test(\"Score calculation returns 200\", () => {\n  pw.expect(pw.response.status).toBe(200);\n});\n\npw.test(\"Response has score details\", () => {\n  const jsonData = pw.response.json();\n  pw.expect(jsonData).toHaveProperty(\"session_score\");\n  pw.expect(jsonData).toHaveProperty(\"score_breakdown\");\n  pw.expect(jsonData).toHaveProperty(\"rating\");\n  pw.expect(jsonData.session_score).toBeGreaterThanOrEqual(0);\n  pw.expect(jsonData.session_score).toBeLessThanOrEqual(100);\n});",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "params": [],
          "body": {
            "contentType": "application/json",
            "body": "{\n  \"calculate_immediate\": true,\n  \"include_breakdown\": true,\n  \"score_type\": \"preliminary\"\n}"
          },
          "_id": "req_get_score"
        },
        {
          "name": "Generate Session Report",
          "url": "http://127.0.0.1:8001/api/v1/sessions/{{session_id}}/report",
          "path": "/api/v1/sessions/{{session_id}}/report",
          "method": "POST",
          "auth": {
            "authType": "none",
            "authActive": true
          },
          "preRequestScript": "// Set session_id for testing\npw.env.set(\"session_id\", \"test-session-001\");",
          "testScript": "// Test: Send the final score (\"B\" rating after feedback) plus suggested actions at session end if the session doesn't have user input score by MySQL DB query.\npw.test(\"Report generation returns 200\", () => {\n  pw.expect(pw.response.status).toBe(200);\n});\n\npw.test(\"Response has complete report with B rating\", () => {\n  const jsonData = pw.response.json();\n  pw.expect(jsonData).toHaveProperty(\"final_score\");\n  pw.expect(jsonData).toHaveProperty(\"rating\");\n  pw.expect(jsonData).toHaveProperty(\"suggested_actions\");\n  pw.expect(jsonData).toHaveProperty(\"session_summary\");\n  pw.expect(jsonData.rating).toBe(\"B\");\n  pw.expect(jsonData.suggested_actions).toBeArray();\n});",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "params": [],
          "body": {
            "contentType": "application/json",
            "body": "{\n  \"include_suggestions\": true,\n  \"report_type\": \"detailed\",\n  \"use_db_fallback\": true,\n  \"target_rating\": \"B\"\n}"
          },
          "_id": "req_generate_report"
        }
      ],
      "_id": "folder_scoring"
    }
  ],
  "requests": [],
  "auth": {
    "authType": "none",
    "authActive": true
  },
  "headers": [
    {
      "key": "User-Agent",
      "value": "Hoppscotch-AnchorInsightAI-FeedbackLogCompliant/1.0"
    },
    {
      "key": "Accept",
      "value": "application/json"
    }
  ],
  "environments": [
    {
      "name": "Development",
      "variables": [
        {
          "key": "base_url",
          "value": "http://127.0.0.1:8001"
        },
        {
          "key": "session_id",
          "value": "test-session-001"
        },
        {
          "key": "user_id",
          "value": "user_123"
        }
      ]
    },
    {
      "name": "Production",
      "variables": [
        {
          "key": "base_url",
          "value": "https://api.anchor-insight.com"
        },
        {
          "key": "session_id",
          "value": ""
        },
        {
          "key": "user_id",
          "value": ""
        }
      ]
    }
  ],
  "_ref_id": "coll_anchor_insight_ai_feedback_log_compliant"
}
